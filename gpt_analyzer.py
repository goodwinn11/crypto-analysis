#!/usr/bin/env python3
"""
GPT-4 Signal Analyzer
Generates detailed trading signal analysis using OpenAI GPT-4
"""

import os
import json
from datetime import datetime
from typing import Dict, Optional
from openai import AsyncOpenAI
import logging

from signal_generator import TradingSignal

logger = logging.getLogger(__name__)

class GPTSignalAnalyzer:
    """Analyzes trading signals using GPT-4 to generate detailed reports"""
    
    def __init__(self, api_key: str, model: str = "gpt-4-turbo-preview"):
        self.client = AsyncOpenAI(api_key=api_key)
        self.model = model
        
    async def analyze_signal(self, signal: TradingSignal) -> str:
        """
        Generate detailed analysis for a trading signal
        Returns analysis in the exact format from your example
        """
        
        # Format current time for the analysis
        analysis_time = datetime.now().strftime("%d %B %Y, %H:%M CEST")
        
        # Build the analysis prompt
        prompt = f"""
–°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ç–æ—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –Ω–∏–∂–µ.

–î–ê–ù–ù–´–ï –°–ò–ì–ù–ê–õ–ê:
{signal.to_analysis_context()}

–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal.strength}/10
–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal.signal_type}
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏:
- Entry: {signal.entry_price} USDT
- Stop Loss: {signal.stop_loss} USDT
- Take Profit 1: {signal.take_profit_1} USDT
- Take Profit 2: {signal.take_profit_2} USDT

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É):

{signal.symbol} ‚Äì {signal.timeframe}, {signal.indicator}

–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time}

1. –ü–æ–ª–æ–∂–µ–Ω–∏–µ –ª–∏–Ω–∏–π
    ‚Ä¢ –û–ø–∏—à–∏ —Ç–æ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ Lips –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Teeth, Teeth –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Jaw
    ‚Ä¢ –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–∏–Ω–∏—è–º–∏ –≤ USDT –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    ‚Ä¢ –û–ø–∏—à–∏ —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–ª—è —Ç—Ä–µ–Ω–¥–∞ (–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π)
    ‚Ä¢ –£–∫–∞–∂–∏ —Ñ–∞–∑—É –ê–ª–ª–∏–≥–∞—Ç–æ—Ä–∞ (—Å–æ–Ω/–ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ/–æ—Ö–æ—Ç–∞/–Ω–∞—Å—ã—â–µ–Ω–∏–µ)

2. –§–∞–∑–∞ —Ä—ã–Ω–∫–∞
    ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É: –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ/—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ/—Ç—Ä–µ–Ω–¥/–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
    ‚Ä¢ –£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ —Ñ–∞–∑—ã
    ‚Ä¢ –û–ø–∏—à–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
    ‚Ä¢ –î–∞–π –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

3. –¶–µ–Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Alligator
    ‚Ä¢ –£–∫–∞–∂–∏ —Ç–æ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏
    ‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–∂–¥–æ–π –ª–∏–Ω–∏–∏
    ‚Ä¢ –û–ø–∏—à–∏ —Å–∏–ª—É –¥–≤–∏–∂–µ–Ω–∏—è –∏ –º–æ–º–µ–Ω—Ç—É–º
    ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π/–ø—Ä–æ–¥–∞–≤—Ü–æ–≤

4. –§—Ä–∞–∫—Ç–∞–ª—ã
    ‚Ä¢ –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ—Ä—Ö–Ω–∏–π —Ñ—Ä–∞–∫—Ç–∞–ª –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å (–ø—Ä–æ–±–∏—Ç/–∞–∫—Ç–∏–≤–µ–Ω)
    ‚Ä¢ –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∏–∂–Ω–∏–π —Ñ—Ä–∞–∫—Ç–∞–ª –∏ –µ–≥–æ —Ä–æ–ª—å
    ‚Ä¢ –£–∫–∞–∂–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–µ—Å—è —Ñ—Ä–∞–∫—Ç–∞–ª—ã
    ‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ü–µ–ª–µ–π

5. –û–±—ä—ë–º—ã
    ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–π –æ–±—ä—ë–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
    ‚Ä¢ –û–ø–∏—à–∏ –≤—Å–ø–ª–µ—Å–∫–∏ –æ–±—ä—ë–º–∞ –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ
    ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ–±—ä—ë–º–∞–º–∏
    ‚Ä¢ –£–∫–∞–∂–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂

6. –°–∏–≥–Ω–∞–ª
    ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤—à–∏–π—Å—è —Å–∏–≥–Ω–∞–ª
    ‚Ä¢ –£–∫–∞–∂–∏ –≤—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ —Å–∏–ª—É –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
    ‚Ä¢ –£–∫–∞–∂–∏ —É—Å–ª–æ–≤–∏—è –æ—Ç–º–µ–Ω—ã —Å–∏–≥–Ω–∞–ª–∞

7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    ‚Ä¢ Entry: {signal.entry_price} USDT (–æ–±–æ—Å–Ω—É–π –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è)
    ‚Ä¢ SL: {signal.stop_loss} USDT (–æ–±—ä—è—Å–Ω–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)
    ‚Ä¢ TP1: {signal.take_profit_1} USDT (—É–∫–∞–∂–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è)
    ‚Ä¢ TP2: {signal.take_profit_2} USDT (–¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏)
    ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: —É–∫–∞–∂–∏ % –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
    ‚Ä¢ Risk/Reward: —Ä–∞—Å—Å—á–∏—Ç–∞–π —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã, –±—É–¥—å —Ç–æ—á–µ–Ω –≤ —Ü–∏—Ñ—Ä–∞—Ö, –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
"""

        try:
            # Call GPT-4 API
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–µ—Ä –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –º–µ—Ç–æ–¥–µ –ë–∏–ª–ª–∞ –í–∏–ª—å—è–º—Å–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ Alligator. –î–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑."
                    },
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            logger.error(f"GPT-4 API error: {e}")
            raise

    async def generate_extended_analysis(self, signal: TradingSignal) -> Dict[str, str]:
        """
        Generate multiple detailed analyses for different aspects
        Returns dictionary with different analysis sections
        """
        
        analyses = {}
        
        # Main technical analysis
        analyses['technical'] = await self.analyze_signal(signal)
        
        # Risk management analysis
        risk_prompt = f"""
–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ {signal.symbol}:

–î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:
- Entry: {signal.entry_price} USDT
- Stop Loss: {signal.stop_loss} USDT
- Take Profit 1: {signal.take_profit_1} USDT
- Take Profit 2: {signal.take_profit_2} USDT
- –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {signal.current_price} USDT

–†–∞—Å—Å—á–∏—Ç–∞–π –∏ –æ–ø–∏—à–∏:
1. –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤: $1,000, $10,000, $100,000
2. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (–≤ $ –∏ %)
3. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –∏ R:R ratio
4. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
5. –ü–ª–∞–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
6. Trailing stop —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
7. –ß–∞—Å—Ç–∏—á–Ω—ã–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏
8. –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
"""
        
        try:
            risk_response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É –≤ –∫—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥–µ."},
                    {"role": "user", "content": risk_prompt}
                ],
                temperature=0.5,
                max_tokens=1500
            )
            analyses['risk_management'] = risk_response.choices[0].message.content
        except Exception as e:
            logger.error(f"Risk analysis error: {e}")
            analyses['risk_management'] = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤"
        
        # Alternative scenarios
        scenarios_prompt = f"""
–û–ø–∏—à–∏ 3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –¥–ª—è {signal.symbol} –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞ {signal.signal_type}:

–ë–´–ß–ò–ô –°–¶–ï–ù–ê–†–ò–ô (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π):
- –ü—É—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
- –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏: {signal.take_profit_1}, {signal.take_profit_2}
- –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: X%

–ù–ï–ô–¢–†–ê–õ–¨–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô (–∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è):
- –î–∏–∞–ø–∞–∑–æ–Ω –¥–≤–∏–∂–µ–Ω–∏—è
- –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–µ–π—Å—Ç–≤–∏–π

–ú–ï–î–í–ï–ñ–ò–ô –°–¶–ï–ù–ê–†–ò–ô (—Å—Ç–æ–ø-–ª–æ—Å—Å):
- –£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
- –£—Ä–æ–≤–µ–Ω—å –≤—ã—Ö–æ–¥–∞: {signal.stop_loss}
- –ü–ª–∞–Ω –ë

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —É–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞.
"""
        
        try:
            scenarios_response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å—Ü–µ–Ω–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ."},
                    {"role": "user", "content": scenarios_prompt}
                ],
                temperature=0.6,
                max_tokens=1200
            )
            analyses['scenarios'] = scenarios_response.choices[0].message.content
        except Exception as e:
            logger.error(f"Scenarios analysis error: {e}")
            analyses['scenarios'] = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"
        
        return analyses

class SignalReportGenerator:
    """Generates formatted reports from GPT analysis"""
    
    @staticmethod
    def generate_text_report(signal: TradingSignal, analysis: str) -> str:
        """Generate formatted text report"""
        
        report = f"""
{'='*80}
üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ì–û –°–ò–ì–ù–ê–õ–ê
{'='*80}

{analysis}

{'='*80}
üìà –ü–ê–†–ê–ú–ï–¢–†–´ –°–ò–ì–ù–ê–õ–ê
{'='*80}
–ü–∞—Ä–∞: {signal.symbol}
–¢–∞–π–º—Ñ—Ä–µ–π–º: {signal.timeframe}
–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: {signal.indicator}
–¢–∏–ø: {signal.signal_type}
–°–∏–ª–∞: {signal.strength}/10
–í—Ä–µ–º—è: {signal.timestamp.strftime('%Y-%m-%d %H:%M:%S')}

{'='*80}
üí∞ –¢–û–†–ì–û–í–´–ï –£–†–û–í–ù–ò
{'='*80}
Entry: {signal.entry_price} USDT
Stop Loss: {signal.stop_loss} USDT
Take Profit 1: {signal.take_profit_1} USDT
Take Profit 2: {signal.take_profit_2} USDT

Risk/Reward: 1:{round((signal.take_profit_1 - signal.entry_price) / (signal.entry_price - signal.stop_loss), 2)}

{'='*80}
ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é GPT-4
{'='*80}
"""
        return report
    
    @staticmethod
    def generate_html_report(signal: TradingSignal, analyses: Dict[str, str]) -> str:
        """Generate HTML report with all analyses"""
        
        html = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{signal.symbol} - –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ {signal.signal_type}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        .header {{
            background: rgba(255, 255, 255, 0.98);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }}
        .signal-badge {{
            display: inline-block;
            padding: 10px 20px;
            border-radius: 30px;
            font-weight: bold;
            color: white;
            font-size: 18px;
        }}
        .signal-long {{
            background: linear-gradient(135deg, #10b981, #34d399);
        }}
        .signal-short {{
            background: linear-gradient(135deg, #ef4444, #f87171);
        }}
        .analysis-section {{
            background: rgba(255, 255, 255, 0.98);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }}
        .analysis-content {{
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #667eea;
            white-space: pre-wrap;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            line-height: 1.8;
        }}
        .levels-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        .level-card {{
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            text-align: center;
        }}
        .level-label {{
            font-size: 12px;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 5px;
        }}
        .level-value {{
            font-size: 24px;
            font-weight: bold;
            color: #1f2937;
        }}
        .strength-bar {{
            width: 100%;
            height: 40px;
            background: #e5e7eb;
            border-radius: 20px;
            overflow: hidden;
            margin: 20px 0;
        }}
        .strength-fill {{
            height: 100%;
            background: linear-gradient(90deg, #ef4444 0%, #f59e0b 50%, #10b981 100%);
            transition: width 0.5s ease;
        }}
        h1, h2 {{
            color: #1f2937;
            margin-bottom: 15px;
        }}
        .tabs {{
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }}
        .tab {{
            padding: 10px 20px;
            background: #e5e7eb;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s;
        }}
        .tab:hover {{
            background: #d1d5db;
        }}
        .tab.active {{
            background: #667eea;
            color: white;
        }}
        .tab-content {{
            display: none;
        }}
        .tab-content.active {{
            display: block;
        }}
        .footer {{
            text-align: center;
            padding: 20px;
            color: white;
            opacity: 0.9;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä {signal.symbol} - –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞</h1>
            <div style="margin: 20px 0;">
                <span class="signal-badge signal-{signal.signal_type.lower()}">{signal.signal_type}</span>
                <span style="margin-left: 20px; font-size: 18px;">
                    –¢–∞–π–º—Ñ—Ä–µ–π–º: <strong>{signal.timeframe}</strong> | 
                    –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä: <strong>{signal.indicator}</strong>
                </span>
            </div>
            
            <div>
                <div class="level-label">–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞</div>
                <div class="strength-bar">
                    <div class="strength-fill" style="width: {signal.strength * 10}%"></div>
                </div>
                <div style="text-align: center; font-size: 24px; font-weight: bold;">
                    {signal.strength}/10
                </div>
            </div>
            
            <div class="levels-grid">
                <div class="level-card">
                    <div class="level-label">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</div>
                    <div class="level-value">{signal.current_price}</div>
                </div>
                <div class="level-card">
                    <div class="level-label">Entry</div>
                    <div class="level-value">{signal.entry_price}</div>
                </div>
                <div class="level-card">
                    <div class="level-label">Stop Loss</div>
                    <div class="level-value" style="color: #ef4444;">{signal.stop_loss}</div>
                </div>
                <div class="level-card">
                    <div class="level-label">Take Profit 1</div>
                    <div class="level-value" style="color: #10b981;">{signal.take_profit_1}</div>
                </div>
                <div class="level-card">
                    <div class="level-label">Take Profit 2</div>
                    <div class="level-value" style="color: #10b981;">{signal.take_profit_2}</div>
                </div>
            </div>
        </div>
        
        <div class="analysis-section">
            <h2>üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</h2>
            <div class="tabs">
                <div class="tab active" onclick="showTab('technical')">–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑</div>
                <div class="tab" onclick="showTab('risk')">–†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç</div>
                <div class="tab" onclick="showTab('scenarios')">–°—Ü–µ–Ω–∞—Ä–∏–∏</div>
            </div>
            
            <div id="technical" class="tab-content active">
                <div class="analysis-content">{analyses.get('technical', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}</div>
            </div>
            
            <div id="risk" class="tab-content">
                <div class="analysis-content">{analyses.get('risk_management', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}</div>
            </div>
            
            <div id="scenarios" class="tab-content">
                <div class="analysis-content">{analyses.get('scenarios', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}</div>
            </div>
        </div>
        
        <div class="footer">
            <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            <p>Powered by GPT-4 & Custom Signal Generator</p>
        </div>
    </div>
    
    <script>
        function showTab(tabName) {{
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {{
                tab.classList.remove('active');
            }});
            document.querySelectorAll('.tab').forEach(tab => {{
                tab.classList.remove('active');
            }});
            
            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }}
    </script>
</body>
</html>
"""
        return html

if __name__ == "__main__":
    # Test the analyzer
    import asyncio
    
    async def test():
        # You need to set your OpenAI API key
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("Please set OPENAI_API_KEY environment variable")
            return
        
        # Create test signal
        from signal_generator import TradingSignal
        
        signal = TradingSignal(
            symbol="BTCUSDT",
            timeframe="4H",
            indicator="Williams Alligator",
            signal_type="LONG",
            strength=8.5,
            current_price=120250,
            lips_value=119450,
            teeth_value=118900,
            jaw_value=118200,
            entry_price=119000,
            stop_loss=117700,
            take_profit_1=121800,
            take_profit_2=123500,
            upper_fractal=118300,
            lower_fractal=117650,
            volume_24h=1200000000,
            current_volume=450000000,
            volume_spike=True,
            market_phase="hunting",
            trend_strength="strong"
        )
        
        # Create analyzer
        analyzer = GPTSignalAnalyzer(api_key)
        
        print("Generating analysis...")
        analysis = await analyzer.analyze_signal(signal)
        
        # Generate report
        report = SignalReportGenerator.generate_text_report(signal, analysis)
        print(report)
    
    asyncio.run(test())